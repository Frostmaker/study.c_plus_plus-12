/*
1. Функция ввода размера матрицы, размещение ее в динамической памяти и ввод элементов матрицы
2. Функция удаления матрицы, размещенной в динамической памяти
3. Функция вычисления отношения сумм элементов на главной и побочной диагоналях квадратной матрицы.
4. Добавить в матрицу столбец, содержащий минимальный положительный элемент в строке. 
	Если в строке нет положительных элементов, столбец должен содержать значение 0.
5. Удалить из матрицы строку и столбец, на пересечении которых стоит максимальный элемент матрицы. 
	Считать, что функция выполняется для одного из максимальных элементов, если их несколько.
6. Удалить из матрицы строки, удовлетворяющие условию, заданному  функцией-параметром. 
	Использовать в качестве параметра функции: строка состоит из одних нулей, в строке нет положительных элементов.
*/

#include <iostream>
#include "defs.h"

using namespace std;

void menu()
{
    cout << "/======================= MENU =======================\\\n";
    cout << "| 1. Ввод матрицы                                    |\n";
    cout << "| 2. Удаление матрицы                                |\n";
    cout << "| 3. Отношение сумм элементов на диагоналях          |\n";
    cout << "| 4. Добавить столбец с мин. пол. элементом строки   |\n";
    cout << "| 5. Удаление строки и столбца с макс. элементом     |\n";
    cout << "| 6. Удаление отрицательных и нулевых строк          |\n";
	cout << "| 7. Вывод матрицы                                   |\n";
	cout << "| 9. Вывод меню                                      |\n";
    cout << "| 0. Выход                                           |\n";
    cout << "\\====================================================/\n";
}

int main()
{
	setlocale(LC_ALL, "Rus");

	double** m = nullptr;
	size_t rows;
	size_t cols;

	int p;
	bool tf{ true };
	menu();
	while (tf) {
		cout << "Выберите пункт меню: ";
		cin >> p;

		switch (p) {
		case 1:
		{
			read_new(m, rows, cols);
			break;
		}

		case 2:
		{
			delete_matrix(m, rows, cols);
			break;
		}

		case 3:
		{
			try {
				cout << sum(m, rows, cols) << endl;
			}
			catch (int a) {
				cout << "Ошибка: деление на 0" << endl;
			}
			break;
		}

		case 4:
		{
			newcolum(m, rows, cols);
			break;
		}

		case 5:
		{
			max_del(m, rows, cols);
			break;
		}

		case 6:
		{
			print_func(check_row, m, rows, cols);
			break;
		}

		case 7:
		{
			printMatrix(m, rows, cols);
			break;
		}

		case 9:
		{
			menu();
			break;
		}

		case 0:
		{
			tf = false;
			break;
		}

		default:
		{
			cout << "\nНет такого пункта меню!\n";
		}
		}
	}

	//system("pause");
	return 0;
}